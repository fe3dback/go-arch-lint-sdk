This file is autogenerated at 2024-08-20 22:29:59
Do not edit it manually.

models.Config{
 SyntaxProblems: arch.RefSlice[string](nil),
 Version: arch.Ref[arch.ConfigVersion]{
  Value: 4,
  Ref: arch.Reference{
   File: "/conf.yml",
   Line: 1,
   Column: 10,
   XPath: "$.version",
   Valid: true,
  },
 },
 WorkingDirectory: arch.Ref[arch.PathRelative]{
  Value: "",
  Ref: arch.Reference{
   File: "",
   Line: 0,
   Column: 0,
   XPath: "",
   Valid: false,
  },
 },
 Settings: models.ConfigSettings{
  DeepScan: arch.Ref[bool]{
   Value: true,
   Ref: arch.Reference{
    File: "",
    Line: 0,
    Column: 0,
    XPath: "",
    Valid: false,
   },
  },
  Imports: models.ConfigSettingsImports{
   StrictMode: arch.Ref[bool]{
    Value: false,
    Ref: arch.Reference{
     File: "",
     Line: 0,
     Column: 0,
     XPath: "",
     Valid: false,
    },
   },
   AllowAnyVendorImports: arch.Ref[bool]{
    Value: false,
    Ref: arch.Reference{
     File: "",
     Line: 0,
     Column: 0,
     XPath: "",
     Valid: false,
    },
   },
  },
  Tags: models.ConfigSettingsTags{
   Allowed: arch.Ref[arch.ConfigSettingsTagsEnum]{
    Value: "List",
    Ref: arch.Reference{
     File: "/conf.yml",
     Line: 5,
     Column: 14,
     XPath: "$.settings.structTags.allowed",
     Valid: true,
    },
   },
   AllowedList: arch.RefSlice[arch.StructTag]{
    {
     Value: "db",
     Ref: arch.Reference{
      File: "/conf.yml",
      Line: 5,
      Column: 16,
      XPath: "$.settings.structTags.allowed[0]",
      Valid: true,
     },
    },
    {
     Value: "bd",
     Ref: arch.Reference{
      File: "/conf.yml",
      Line: 5,
      Column: 20,
      XPath: "$.settings.structTags.allowed[1]",
      Valid: true,
     },
    },
    {
     Value: "another",
     Ref: arch.Reference{
      File: "/conf.yml",
      Line: 6,
      Column: 7,
      XPath: "$.settings.structTags.allowed[2]",
      Valid: true,
     },
    },
    {
     Value: "json",
     Ref: arch.Reference{
      File: "/conf.yml",
      Line: 7,
      Column: 7,
      XPath: "$.settings.structTags.allowed[3]",
      Valid: true,
     },
    },
   },
  },
 },
 Exclude: models.ConfigExclude{
  RelativeDirectories: arch.RefSlice[arch.PathRelative]{
  },
  RelativeFiles: arch.RefSlice[arch.PathRelativeRegExp]{
  },
 },
 Components: models.ConfigComponents{
  Map: arch.RefMap[arch.ComponentName,internal/models.ConfigComponent]{
   values: map[arch.ComponentName]models.ConfigComponent{
    "main": {
     In: arch.RefSlice[arch.PathRelativeGlob]{
      {
       Value: "app",
       Ref: arch.Reference{
        File: "/conf.yml",
        Line: 11,
        Column: 30,
        XPath: "$.components.main.in",
        Valid: true,
       },
      },
     },
    },
    "models": {
     In: arch.RefSlice[arch.PathRelativeGlob]{
      {
       Value: "models",
       Ref: arch.Reference{
        File: "/conf.yml",
        Line: 12,
        Column: 30,
        XPath: "$.components.models.in",
        Valid: true,
       },
      },
     },
    },
   },
   refs: map[arch.ComponentName]arch.Reference{
    "main": {
     File: "/conf.yml",
     Line: 11,
     Column: 24,
     XPath: "$.components.main",
     Valid: true,
    },
    "models": {
     File: "/conf.yml",
     Line: 12,
     Column: 24,
     XPath: "$.components.models",
     Valid: true,
    },
   },
  },
 },
 Vendors: models.ConfigVendors{
  Map: arch.RefMap[arch.VendorName,internal/models.ConfigVendor]{
   values: map[arch.VendorName]models.ConfigVendor{
   },
   refs: map[arch.VendorName]arch.Reference{
   },
  },
 },
 CommonComponents: arch.RefSlice[arch.ComponentName]{
 },
 CommonVendors: arch.RefSlice[arch.VendorName]{
 },
 Dependencies: models.ConfigDependencies{
  Map: arch.RefMap[arch.ComponentName,internal/models.ConfigComponentDependencies]{
   values: map[arch.ComponentName]models.ConfigComponentDependencies{
    "main": {
     MayDependOn: arch.RefSlice[arch.ComponentName]{
      {
       Value: "models",
       Ref: arch.Reference{
        File: "/conf.yml",
        Line: 17,
        Column: 7,
        XPath: "$.dependencies.main.mayDependOn",
        Valid: true,
       },
      },
     },
     CanUse: arch.RefSlice[arch.VendorName]{
     },
     AnyVendorDeps: arch.Ref[bool]{
      Value: false,
      Ref: arch.Reference{
       File: "",
       Line: 0,
       Column: 0,
       XPath: "",
       Valid: false,
      },
     },
     AnyProjectDeps: arch.Ref[bool]{
      Value: false,
      Ref: arch.Reference{
       File: "",
       Line: 0,
       Column: 0,
       XPath: "",
       Valid: false,
      },
     },
     CanContainTags: arch.RefSlice[arch.StructTag]{
     },
     DeepScan: models.ConfigOptional[arch.Ref[bool]]{
      Value: arch.Ref[bool]{
       Value: false,
       Ref: arch.Reference{
        File: "",
        Line: 0,
        Column: 0,
        XPath: "",
        Valid: false,
       },
      },
      Defined: false,
     },
    },
   },
   refs: map[arch.ComponentName]arch.Reference{
    "main": {
     File: "/conf.yml",
     Line: 16,
     Column: 16,
     XPath: "$.dependencies.main",
     Valid: true,
    },
   },
  },
 },
}
