This file is autogenerated at 2024-08-20 22:29:59
Do not edit it manually.

models.Config{
 SyntaxProblems: arch.RefSlice[string]{
  {
   Value: "[5:1] unexpected directive value. document not started",
   Ref: arch.Reference{
    File: "/conf.yml",
    Line: 5,
    Column: 1,
    XPath: "",
    Valid: true,
   },
  },
 },
 Version: arch.Ref[arch.ConfigVersion]{
  Value: 0,
  Ref: arch.Reference{
   File: "",
   Line: 0,
   Column: 0,
   XPath: "",
   Valid: false,
  },
 },
 WorkingDirectory: arch.Ref[arch.PathRelative]{
  Value: "",
  Ref: arch.Reference{
   File: "",
   Line: 0,
   Column: 0,
   XPath: "",
   Valid: false,
  },
 },
 Settings: models.ConfigSettings{
  DeepScan: arch.Ref[bool]{
   Value: false,
   Ref: arch.Reference{
    File: "",
    Line: 0,
    Column: 0,
    XPath: "",
    Valid: false,
   },
  },
  Imports: models.ConfigSettingsImports{
   StrictMode: arch.Ref[bool]{
    Value: false,
    Ref: arch.Reference{
     File: "",
     Line: 0,
     Column: 0,
     XPath: "",
     Valid: false,
    },
   },
   AllowAnyVendorImports: arch.Ref[bool]{
    Value: false,
    Ref: arch.Reference{
     File: "",
     Line: 0,
     Column: 0,
     XPath: "",
     Valid: false,
    },
   },
  },
  Tags: models.ConfigSettingsTags{
   Allowed: arch.Ref[arch.ConfigSettingsTagsEnum]{
    Value: "",
    Ref: arch.Reference{
     File: "",
     Line: 0,
     Column: 0,
     XPath: "",
     Valid: false,
    },
   },
   AllowedList: arch.RefSlice[arch.StructTag](nil),
  },
 },
 Exclude: models.ConfigExclude{
  RelativeDirectories: arch.RefSlice[arch.PathRelative](nil),
  RelativeFiles: arch.RefSlice[arch.PathRelativeRegExp](nil),
 },
 Components: models.ConfigComponents{
  Map: arch.RefMap[arch.ComponentName,internal/models.ConfigComponent]{
   values: map[arch.ComponentName]models.ConfigComponent(nil),
   refs: map[arch.ComponentName]arch.Reference(nil),
  },
 },
 Vendors: models.ConfigVendors{
  Map: arch.RefMap[arch.VendorName,internal/models.ConfigVendor]{
   values: map[arch.VendorName]models.ConfigVendor(nil),
   refs: map[arch.VendorName]arch.Reference(nil),
  },
 },
 CommonComponents: arch.RefSlice[arch.ComponentName](nil),
 CommonVendors: arch.RefSlice[arch.VendorName](nil),
 Dependencies: models.ConfigDependencies{
  Map: arch.RefMap[arch.ComponentName,internal/models.ConfigComponentDependencies]{
   values: map[arch.ComponentName]models.ConfigComponentDependencies(nil),
   refs: map[arch.ComponentName]arch.Reference(nil),
  },
 },
}
